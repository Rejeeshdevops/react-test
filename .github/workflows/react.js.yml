name: Deploy React App to S3
on:
  push:
    branches:
      - master  # Change branch if needed
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: '18'  # LTS version recommended
        
    - name: 📦 Install PNPM
      run: npm install -g pnpm
      
    - name: ⚡ Restore PNPM Cache
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
    
    # ✅ NEW: Clean old build files before installing dependencies
    - name: 🧹 Clean Old Build Files
      run: |
        echo "Cleaning old build files..."
        rm -rf node_modules dist .vite .parcel-cache .next

    - name: 📦 Install Dependencies
      run: pnpm install --frozen-lockfile
      
    # ✅ NEW: Ensure old cache files don’t interfere
    - name: 🧹 Remove Vite Cache (if applicable)
      run: rm -rf node_modules/.cache/vite || true
      
    - name: 🎯 Build React App
      run: pnpm run build
      
    - name: 📂 Verify Build Output
      run: |
        echo "Checking build directory..."
        ls -al ./dist || (echo "Build directory is missing!" && exit 1)
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 🚀 Deploy to S3
      run: |
    #    if [ -z "${{ secrets.S3_BUCKET }}" ]; then
          echo "Error: S3_BUCKET secret is not set."
          exit 1
        fi
        aws s3 sync ./dist s3://${{ secrets.S3_BUCKET }} --exact-timestamps --delete --cache-control "no-cache, no-store, must-revalidate"
      
    - name: 🔄 Invalidate CloudFront Cache
      run: |
        set -e
        if [ -z "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          echo "Error: CLOUDFRONT_DISTRIBUTION_ID secret is not set."
          exit 1
        fi
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      
    - name: 🐛 Debug Environment Variables (Non-sensitive)
      run: |
        echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
        echo "S3_BUCKET: ${{ secrets.S3_BUCKET }}"
        echo "CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
