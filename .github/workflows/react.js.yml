name: Deploy React App to S3

on:
  push:
    branches:
      - master  # Change as needed

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: ðŸš€ Checkout Code
      uses: actions/checkout@v4

    - name: ðŸ”§ Use Node.js LTS
      uses: actions/setup-node@v4
      with:
        node-version: '18'  # Use latest LTS version
        cache: 'pnpm'

    - name: ðŸ”§ Enable Corepack & Install PNPM
      run: |
        corepack enable
        corepack prepare pnpm@latest --activate
        echo "Checking if PNPM is installed..."
        pnpm --version || echo "PNPM installation failed!"

    - name: ðŸ›  Debug PNPM Installation (if needed)
      run: |
        echo "Node.js Version:"
        node -v
        echo "Checking Corepack Version:"
        corepack --version || echo "Corepack not found"
        echo "Checking PNPM Installation Path:"
        which pnpm || echo "PNPM not found in PATH"
        echo "Checking PNPM Version:"
        pnpm --version || echo "PNPM not installed"

    - name: âš¡ Restore PNPM Cache
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: ðŸ“¦ Install Dependencies
      run: pnpm install --frozen-lockfile

    - name: ðŸ”„ Detect Changed Files
      id: changed-files
      uses: tj-actions/changed-files@v44  # Gets list of modified files

    - name: ðŸŽ¯ Build Only If Needed
      if: contains(steps.changed-files.outputs.all_changed_files, 'src/')
      run: pnpm build

    - name: ðŸš€ Deploy Only If Build Exists
      if: contains(steps.changed-files.outputs.all_changed_files, 'src/')
      run: |
        aws s3 sync ./build s3://${{ secrets.S3_BUCKET }} --exact-timestamps --delete
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

    - name: ðŸ”„ Invalidate CloudFront Cache
      if: contains(steps.changed-files.outputs.all_changed_files, 'src/')
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
